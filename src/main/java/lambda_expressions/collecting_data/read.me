1.  String shortMenu = menu.stream()
        .collect( reducing( (d1, d2) -> d1.getName() + d2.getName() ) ).get();

This doesn’t compile because the one argument that reducing accepts is a
BinaryOperator<T> that’s a BiFunction<T,T,T>. This means that it wants a function taking two
arguments and returns a value of the same type, but the lambda expression used there has two
dishes as arguments but returns a string.

WAZNE
184 - 188

Following are the key concepts you should take away from this chapter:
-   collect is a terminal operation that takes as argument various recipes (called collectors) for
    accumulating the elements of a stream into a summary result.

-   Predefined collectors include reducing and summarizing stream elements into a single value, such as
    calculating the minimum, maximum, or average. Those collectors are summarized in table 6.1.

-   Predefined collectors let you group elements of a stream with groupingBy and partition elements of a
    stream with partitioningBy .

-   Collectors compose effectively to create multilevel groupings, partitions, and reductions.
-   You can develop your own collectors by implementing the methods defined in the Collector interface.